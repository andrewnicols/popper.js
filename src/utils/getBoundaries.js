import getOffsetParent from './getOffsetParent';
import getScrollParent from './getScrollParent';
import getOffsetRect from './getOffsetRect';
import getPosition from './getPosition';

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {Object} data - Object containing the property "offsets" generated by `_getOffsets`
 * @param {Number} padding - Boundaries padding
 * @param {Element} boundariesElement - Element used to define the boundaries
 * @returns {Object} Coordinates of the boundaries
 */
export default function getBoundaries(popper, padding, boundariesElement) {
    // NOTE: 1 DOM access here
    let boundaries = {};
    const position = getPosition(popper);
    if (boundariesElement === 'window') {
        const body = window.document.body;
        const html = window.document.documentElement;
        const height = Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight );
        const width = Math.max( body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth );

        boundaries = {
            top: 0,
            right: width,
            bottom: height,
            left: 0
        };
    } else if (boundariesElement === 'viewport') {
        const offsetParent = getOffsetParent(popper);
        const scrollParent = getScrollParent(popper);
        const offsetParentRect = getOffsetRect(offsetParent);

        // if the popper is fixed we don't have to substract scrolling from the boundaries
        const scrollTop = position === 'fixed' ? 0 : scrollParent.scrollTop;
        const scrollLeft = position === 'fixed' ? 0 : scrollParent.scrollLeft;

        boundaries = {
            top: 0 - (offsetParentRect.top - scrollTop),
            right: window.document.documentElement.clientWidth - (offsetParentRect.left - scrollLeft),
            bottom: window.document.documentElement.clientHeight - (offsetParentRect.top - scrollTop),
            left: 0 - (offsetParentRect.left - scrollLeft)
        };
        if (position === 'fixed') {
            boundaries.left = Math.max(0, boundaries.left);
            boundaries.top = Math.max(0, boundaries.top);
        }
    } else {
        if (getOffsetParent(popper) === boundariesElement) {
            boundaries = {
                top: 0,
                left: 0,
                right: boundariesElement.clientWidth,
                bottom: boundariesElement.clientHeight
            };
        } else {
            if (position === 'fixed') {
                // Fixed positions are relative to the parent of the offsetElement outside of the Bounding Element.
                const offsetParent = getOffsetParent(boundariesElement);

                if (offsetParent === window.document.documentElement) {
                    const offsetBoundary = getOffsetRect(boundariesElement);
                    const viewportBoundary = getBoundaries(popper, 0, 'viewport');
                    boundaries.left = Math.max(viewportBoundary.left, offsetBoundary.left);
                    boundaries.right = Math.min(viewportBoundary.right, offsetBoundary.right);
                    boundaries.top = Math.max(viewportBoundary.top, offsetBoundary.top);
                    boundaries.bottom = Math.min(viewportBoundary.bottom, offsetBoundary.bottom);
                    boundaries.width = boundaries.right - boundaries.left;
                    boundaries.height = boundaries.bottom - boundaries.top;
                } else {
                    boundaries = getOffsetRect(boundariesElement);
                    const offsetParentRect = getOffsetRect(offsetParent);
                    boundaries.width += offsetParentRect.left;
                    boundaries.right += offsetParentRect.left;
                    boundaries.height += offsetParentRect.top;
                    boundaries.bottom += offsetParentRect.top;
                }
            } else {
                // Absolute positions are relative to the position of the scroll parent.
                const scrollParent = getScrollParent(popper);
                const offsetParent = getOffsetParent(popper);
                const offsetParentRect = getOffsetRect(offsetParent);
                const scrollTop = scrollParent.scrollTop;
                const scrollHeight = scrollParent.offsetHeight;
                const scrollLeft = scrollParent.scrollLeft;
                const scrollWidth = scrollParent.offsetWidth;
                boundaries = {
                    top: Math.max(offsetParentRect.top, 0 - offsetParentRect.top + Math.min(0, scrollTop - scrollHeight)),
                    left: Math.max(offsetParentRect.left, 0 - offsetParentRect.left + Math.min(0, scrollLeft - scrollWidth)),
                    width: scrollWidth - offsetParentRect.left,
                    height: scrollHeight - offsetParentRect.top,
                }
                boundaries.right = boundaries.width;
                boundaries.bottom = boundaries.height;
            }
        }
    }
    boundaries.left = Math.min(boundaries.left + padding, padding);
    boundaries.right -= padding;
    boundaries.top = Math.min(boundaries.top + padding, padding);
    boundaries.bottom -= padding;
    return boundaries;
}
